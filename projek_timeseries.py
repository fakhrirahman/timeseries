# -*- coding: utf-8 -*-
"""Projek_TimeSeries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t8J3jclpX6eBmTUrAIAkRSx7zgJ-Rhoz

# **Import Package**
"""

import pandas as pd
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler

from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout
from keras.layers import *

"""# **Dataset Exploration**"""

df = pd.read_csv('/content/AMZN_2006-01-01_to_2018-01-01.csv')
df.head()

date = df['Date'].values
price = df['Close'].values

"""## **Visualize Closing Price**"""

plt.figure(figsize=(15,5))
plt.plot(date, price, color = 'red', label = 'Real AMZN Stock Price')
plt.title('AMZN Stock Price',
          fontsize=20)

"""# **Preprocessing**"""

def test_size (percent):
  total = len(price)
  test = total*percent
  return round(test)

test_size(0.2)
train_size = len(price)-test_size(0.2)
train_size

training_set = df.iloc[:train_size, 4:5].values
test_set = df.iloc[train_size:, 4:5].values

training_set

sc = MinMaxScaler(feature_range = (0, 1))
training_set_scaled = sc.fit_transform(training_set)

window_size = 50

X_train = []
y_train = []

for i in range(window_size, train_size):
    X_train.append(training_set_scaled[i-window_size:i, 0])
    y_train.append(training_set_scaled[i, 0])

X_train, y_train = np.array(X_train), np.array(y_train)

X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

"""# **Model Initialization**"""

model = Sequential()

model.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))
model.add(Dropout(0.2))

model.add(LSTM(units = 50, return_sequences = True))
model.add(Dropout(0.2))

model.add(LSTM(units = 50, return_sequences = True))
model.add(Dropout(0.2))

model.add(LSTM(units = 50))
model.add(Dropout(0.2))

model.add(Dense(units = 1))

class my_callback(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs={}):
        if(logs.get('mae') < 0.1):
            print("MAE has reached below 10%")

    def on_train_end(self, epoch, logs={}):
        print('Done')

callbacks = my_callback()

"""# **Training**"""

optimizer = tf.keras.optimizers.Adam(learning_rate=0.01)

model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])


history = model.fit(X_train, 
                    y_train, 
                    validation_split = 0.2,
                    callbacks = callbacks,
                    epochs = 100, 
                    batch_size = 32)

dataset_train = df.iloc[:train_size, 4:5]
dataset_test = df.iloc[train_size:, 4:5]
dataset_total = pd.concat((dataset_train, dataset_test), axis = 0)
inputs = dataset_total[len(dataset_total) - len(dataset_test) - window_size:].values
inputs = inputs.reshape(-1,1)
inputs = sc.transform(inputs)

X_test = []
for i in range(window_size, test_size(0.2)):
    X_test.append(inputs[i-window_size:i, 0])
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
print(X_test.shape)

predicted_stock_price = model.predict(X_test)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)